trigger:
  - master

stages:
- stage: AndroidStage
  pool:
    vmImage: 'ubuntu-latest'
  dependsOn: []
  displayName: Android
  jobs:

  - job: AndroidJob
    displayName: Android
    steps: 

    # replace "key.properties" with your secure file name
    - task: DownloadSecureFile@1
      name: keyprop
      displayName: Download key properties file
      inputs:
        secureFile: 'key.properties' 

    # replace "key.jks" with your secure file name
    - task: DownloadSecureFile@1
      name: key
      displayName: Download signing key
      inputs:
        secureFile: 'upload-keystore.jks'

    # adjust paths and file names here
    - task: Bash@3
      displayName: Copy config files
      inputs:
        targetType: 'inline'
        script: |
          cp $(keyprop.secureFilePath) $(Build.SourcesDirectory)/android/key.properties
          cp $(key.secureFilePath) $(Build.SourcesDirectory)/android/app/key.jks
          
          echo "key.properties copied to $(Build.SourcesDirectory)/android/key.properties"
          echo "upload-keystore.jks copied to $(Build.SourcesDirectory)/android/app/key.jks"
    - task: FlutterInstall@0
      displayName: "Install Flutter SDK"
      inputs:
        mode: 'auto'
        channel: 'stable'
        version: 'latest'

    - task: FlutterCommand@0
      displayName: "Run Flutter diagnostics"
      inputs:
        projectDirectory: '.'
        arguments: 'doctor -v'

    - task: FlutterBuild@0
      displayName: "Build application"
      inputs:
        target: 'aab'
        projectDirectory: '$(Build.SourcesDirectory)'

    - task: FlutterTest@0
      displayName: "Run unit tests"
      inputs:
        generateCodeCoverageReport: true
        projectDirectory: '$(Build.SourcesDirectory)'

    - task: CopyFiles@2
      displayName: "Copy app to staging directory"
      inputs:
        sourceFolder: '$(Agent.BuildDirectory)'
        contents: '**/bundle/**'
        targetFolder: '$(Build.StagingDirectory)'
        flattenFolders: true

    - task: PublishBuildArtifacts@1
      displayName: "Publish AAB file"
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'AAB'
        publishLocation: 'Container'

- stage: iOSStage 

  pool:  

    vmImage: 'macos-latest' 

  dependsOn: [] 

  displayName: iOS 

  jobs: 

  

  - job: iOSJob 

    displayName: iOS 

    steps:  

- job: ios
    pool:
      vmImage: "macos-latest"
    variables:
      - group: secrets
      - group: general
      - name: configuration
        value: "Release"
           

    # replace "iosKey" and "yourPwd" with your secure file name and password 

    - task: InstallAppleCertificate@2 

      displayName: Install certificate 

      inputs: 

        certSecureFile: 'goowid.p12' 

        certPwd: 'GreenSignals$24' 

        keychain: 'temp' 

     

    # replace "ios_Profile.mobileprovision" with your secure file name 

    - task: InstallAppleProvisioningProfile@1 

      displayName: Install provisioning file 

      inputs: 

        provisioningProfileLocation: 'secureFiles' 

        provProfileSecureFile: 'Goowid.mobileprovision' 

         

    - task: FlutterInstall@0 

      displayName: "Install Flutter SDK" 

      inputs: 

        mode: 'auto' 

        channel: 'stable' 

        version: 'latest' 

 

    - task: FlutterCommand@0 

      displayName: "Run Flutter diagnostics" 

      inputs: 

        projectDirectory: '.' 

        arguments: 'doctor -v' 

 

    # adjust path to the *.plist file 

    - task: FlutterBuild@0 

      displayName: "Build application" 

      inputs: 

        target: ipa 

        projectDirectory: '$(Build.SourcesDirectory)' 

        exportOptionsPlist: 'ios/exportOptions.plist' 

 

    - task: FlutterTest@0 

      displayName: "Run unit tests" 

      inputs: 

        generateCodeCoverageReport: true 

        projectDirectory: '$(Build.SourcesDirectory)' 

 

    - task: CopyFiles@2 

      displayName: "Copy app to staging directory" 

      inputs: 

        sourceFolder: '$(Agent.BuildDirectory)' 

        contents: '**/ipa/*.ipa' 

        targetFolder: '$(Build.StagingDirectory)' 

        flattenFolders: true 

 

    - task: PublishBuildArtifacts@1 

      displayName: "Publish IPA file" 

      inputs: 

        PathtoPublish: '$(Build.ArtifactStagingDirectory)' 

        ArtifactName: 'IPA' 

        publishLocation: 'Container' 

         

- stage: winStage 

  pool:  

    vmImage: 'windows-latest' 

  dependsOn: [] 

  displayName: Windows 

  jobs: 

  

  - job: windowsJob 

    displayName: Windows 

    steps:  

         

    - task: FlutterInstall@0 

      displayName: "Install Flutter SDK" 

      inputs: 

        mode: 'auto' 

        channel: 'stable' 

        version: 'latest' 

     

    - task: FlutterCommand@0 

      displayName: "Run Flutter diagnostics" 

      inputs: 

        projectDirectory: '.' 

        arguments: 'doctor -v' 

 

    - task: FlutterBuild@0 

      displayName: "Build application" 

      inputs: 

        target: windows 

        projectDirectory: '$(Build.SourcesDirectory)' 

 

    - task: FlutterTest@0 

      displayName: "Run unit tests" 

      inputs: 

        generateCodeCoverageReport: true 

        projectDirectory: '$(Build.SourcesDirectory)' 

 

    # install package msix -> https://pub.dev/packages/msix 

    # provide signing information in pubspec.yaml -> see https://github.com/YehudaKremer/msix/tree/main/example#without-signing 

    - task: FlutterCommand@0 

      displayName: "Create MSIX file" 

      inputs: 

        projectDirectory: '$(Build.SourcesDirectory)' 

        arguments: 'pub run msix:create --build-windows false' 

 

    - task: CopyFiles@2 

      displayName: "Copy app to staging directory" 

      inputs: 

        sourceFolder: '$(Agent.BuildDirectory)' 

        contents: '**/*.msix' 

        targetFolder: '$(Build.StagingDirectory)' 

        flattenFolders: true 

 

    - task: PublishBuildArtifacts@1 

      displayName: "Publish MSIX" 

      inputs: 

        PathtoPublish: '$(Build.ArtifactStagingDirectory)' 

        ArtifactName: 'Windows' 

        publishLocation: 'Container' 

        - task: Bash@3
  displayName: "Upload to firebase app distribution"
  inputs:
    targetType: "inline"
    script: |
      npm i -g firebase-tools
      ls -la $(iosReleaseDir)        
      firebase appdistribution:distribute "$(ipaFile)" \
      --app "$(iosFirebaseDistAppId)" \
      --release-notes "From Azure Devops" \
      --token "$(firebasetoken)" \
      --groups "beta-testers"
